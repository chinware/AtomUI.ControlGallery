trigger: none
pr: none

variables:
   SourceDir: $(Build.SourcesDirectory)
   BuildDir: $(Build.BinariesDirectory)
   AtomUIToolsBinDir: '$(BuildDir)/atomuitools'
   BaseOutputDir: '$(Build.ArtifactStagingDirectory)/output'
   GalleryPublishDir: '$(BuildDir)/gallery_published'
   GalleryDmgOutputDir: '$(BuildDir)/dmg_output'
   AtomUIToolsBin: $(AtomUIToolsBinDir)/AtomUITools.Mac
   
parameters:
   -  name: IsNightlyBuild
      displayName: "Is it a nightly build:"
      type: boolean
      default: false
   -  name: BuildConfiguration
      displayName: "Build configuration:"
      type: string
      default: "Release"
   -  name:
      displayName: "CertIdentity"
      type: string
      default: "Developer ID Application: mi chun (V9BGRMZ9W4)"
      
stages:
   -  stage:
      jobs:
         -  job: BuildAtomUITools
            displayName: "Build macOS dmg installer"
            pool:
               vmImage: 'macOS-latest'
            steps:
               -  task: DownloadSecureFile@1
                  name: caCertificate
                  displayName: "Download SSH private key"
                  inputs:
                     secureFile: "atomuitools"
                     
               -  pwsh: |
                     brew install create-dmg
                     cd $(BuildDir)
                     chmod 0600 $(caCertificate.secureFilePath)
                     git -c core.sshCommand="ssh -i $(caCertificate.secureFilePath)" clone git@github.com:chinware/AtomUITools.git
                     cd AtomUITools/scripts
                     pwsh ./PublishMacToolsLocal.ps1 -publishRootPath $(AtomUIToolsBinDir) -runtime osx-x64
                  displayName: "Build AtomUITools"
                     
               -  task: DownloadSecureFile@1
                  name: codeSignCert
                  displayName: "Download code sign cert"
                  inputs:
                     secureFile: "ChinwareCodeSignCert"
                     
               -  pwsh: |
                     security add-certificates -k ~/Library/Keychains/login.keychain $(codeSignCert.secureFilePath)
                     security find-identity -v -p codesigning
                  displayName: "Install code sign cert" 
               
               -  pwsh: |
                     cd $(SourceDir)/src/AtomUIGallery.Desktop/scripts
                     $GalleryPublishDirX64 = "$(GalleryPublishDir)/osx-x64"
                     pwsh ./PublishToLocal.ps1 -publishRootPath $GalleryPublishDirX64 -runtime osx-x64
                     $(AtomUIToolsBin) create-dmg --runtime osx-x64 --config $GalleryPublishDirX64/config/InstallerConfig.xml --packages $GalleryPublishDirX64/packages --output $(GalleryDmgOutputDir) --verbosity Detailed
                  displayName: "Build dmg for osx-x64"
                  
               -  pwsh: |
                     cd $(SourceDir)/src/AtomUIGallery.Desktop/scripts
                     $GalleryPublishDirArm64 = "$(GalleryPublishDir)/osx-arm64"
                     pwsh ./PublishToLocal.ps1 -publishRootPath $GalleryPublishDirArm64 -runtime osx-arm64
                     $(AtomUIToolsBin) create-dmg --runtime osx-arm64 --config $GalleryPublishDirArm64/config/InstallerConfig.xml --packages $GalleryPublishDirArm64/packages --output $(GalleryDmgOutputDir) --verbosity Detailed
                     ls -alh $(GalleryDmgOutputDir)
                  displayName: "Build dmg for osx-arm64"